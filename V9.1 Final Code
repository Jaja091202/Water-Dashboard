#include <LiquidCrystal_I2C.h>
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <EEPROM.h>

const char* ssid     = "Jaja";
const char* password = "jamessss";

const int valvePin = 10;
const int EEPROM_SIZE = 512;
const int TOTAL_LITRES_ADDR = 0;
const int WATER_QUOTA_ADDR = 4;
const int USERNAME_ADDR = 100; // EEPROM address to store username
const int PASSWORD_ADDR = 150; // EEPROM address to store password
char storedUsername[20];
char storedPassword[20];

#define LED_BUILTIN 16
#define SENSOR 14

LiquidCrystal_I2C lcd(0x27,20,4); 
long currentMillis = 0;
long previousMillis = 0;
int interval = 1000;
boolean ledState = LOW;
float calibrationFactor = 7.125;
volatile byte pulseCount;
byte pulse1Sec = 0;
float flowRate;
unsigned long flowMilliLitres;
unsigned int totalMilliLitres;
float flowLitres;
float totalLitres;
int waterQuota = 100;

AsyncWebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html lang="en">
  <head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Version 2.0</title>
    <style>
      body {
        background-image: url('https://github.com/Jaja091202/Water-Dashboard/blob/main/LOGIN.png?raw=true');
        background-size: cover;
        background-repeat: no-repeat;
        margin-top: 0px;
        height: 657px;
        width: 1382.4px;
      }

      .content {
        display: none;
        text-align: center;
      }

      .active {
        display: block;
      }

      button {
        margin: 10px;
        padding: 10px 20px;
        cursor: pointer;
        background-color: transparent;
        border: none;
      }

      .button-container {
        text-align: center;
        margin-top: 20px;
      }
    </style>
  </head>
  <body style="   width: 1220.89px; height: 337px;">
    <div id="login" class="content active">
      <form id="loginForm" style="text-align: center; margin-top: 200px;">
        <h2> </h2>
        <input id="username" placeholder="Username" required="" style="position: absolute; left: 600px; width: 318px; top: 267px; height: 24px;"

          type="text"> <br>
        <br>
        <input id="password" placeholder="Password" required="" style="position: absolute; left: 600px; width: 318px; top: 313px; height: 24px;"

          type="password"> <br>
        <br>
        <br>
        <button type="submit" style="position: absolute; top: 394px; left: 686px; margin-left: -45.5556px; width: 257.222px; height: 53px;"></button>
        <p id="loginError" style="color: red; display: none;"> </p>
      </form>
    </div>
    <div id="dashboard" class="content ">
      <style>
        #chart {
          width: 400px;
          height: 200px;
        }

        .bar {
          fill: steelblue;
          width: 40px;
          margin: 1px;
        }

        .tick line,
        path {
          stroke: white !important;
        }

        .bar-label {
          text-anchor: middle;
          fill: white;
          font-family: sans-serif;
        }

        .axis text {
          fill: white !important;
        }

        .tick text {
          fill: white;
        }

        .axis text {
          font-family: sans-serif;
          font-size: 12px;
          fill: white;
        }

        .axis path,
        .axis line {
          stroke: white;
        }

        .tick text {
          fill: white;
        }
      </style>
      <table style="width: 1528px; height: 710px;" border="0">
        <tbody style="height: 704.4px;">
          <tr>
            <td style="width: 221px; height: 416.556px;"> <button onclick="showPage('settings')"

                style="margin-left: 1.25px; width: 169px; height: 42.25px; margin-top: 8.75px;"></button>
              <br>
            </td>
            <td style="height: 416.556px; width: 391px; margin-left: 50px;" rowspan="1"

              colspan="2">
              <div id="chart" style="width: 691px; height: 216.556px; margin-top: 170.005px; margin-left: 93.339px;"></div>
              <script src="https://code.highcharts.com/highcharts.js"></script>
              <script>
                let chart;
                document.addEventListener('DOMContentLoaded', function() {
                  chart = Highcharts.chart('chart', {
                    chart: {
                      type: 'spline',
                      backgroundColor: 'transparent'
                    },
                    title: {
                      text: ''
                    },
                    xAxis: {
                      type: 'datetime',
                      tickPixelInterval: 1000,
                      labels: {
                        style: {
                          color: '#FFFFFF'
                        },
                        format: '{value:%H:%M:%S}'
                      },
                      dateTimeLabelFormats: {
                        second: '%H:%M:%S'
                      }
                    },
                    yAxis: {
                      title: {
                        text: 'Flow Rate (L/min)',
                        style: {
                          color: '#FFFFFF'
                        }
                      },
                      labels: {
                        style: {
                          color: '#FFFFFF'
                        }
                      }
                    },
                    series: [{
                      name: 'Flow Rate',
                      data: [],
                      color: '#41B8D5',
                      lineWidth: 0 // Adjust the thickness here
                    }],
                    plotOptions: {
                      spline: {
                        marker: {
                          enabled: false
                        }
                      }
                    },
                    credits: {
                      enabled: false
                    },
                    legend: {
                      enabled: false
                    }
                  });
                  setInterval(updateChart, 1000);

                  function updateChart() {
                    fetch('/flowRate').then(response => response.json()).then(data => {
                      const time = (new Date()).getTime();
                      const shift = chart.series[0].data.length > 15;
                      chart.series[0].addPoint([time, data.flowRate], true, shift);
                    });
                  }
                });
              </script> <br>
            </td>
            <td style="height: 416.556px; width: 405px; margin-left: 12px; text-align: center;">
              <h2 style="width: 350px; height: 35.1111px; margin-top: 112.206px; margin-left: 49.4389px; font-size: 45px; text-align: center; color: white;">
                â‚± <span id="calculatedAmount">0.00</span> </h2>
              <p> <br>
              </p>
              <p style="text-align: left; margin-left: 58.8944px; color:white;">
                <span class="OYPEnA text-decoration-none text-strikethrough-none"

                  id="dateRange1"> June 01, 2024 - July 01, 2024 </span> </p>
            </td>
          </tr>
          <tr>
            <td style="height: 279.333px;"> <br>
            </td>
            <td style="height: 279.333px; width: 387px; margin-left: 21px; text-align: center;">
              <h2 style="width: 305.556px; height: 38.8889px; margin-top: 46.6444px; margin-left: 82.7777px; font-size: 40px; text-align: center; color: white;">
                <span id="liters">0.00</span> l </h2>
              <p style="margin-top: 3.77219px; height: 22.1111px; margin-left: 80px; width: 305.778px; color:white;">
                <span class="OYPEnA text-decoration-none text-strikethrough-none"

                  id="dateRange2"> As of July 01 - 08, 2024 </span> </p>
            </td>
            <td style="height: 279.333px; margin-left: 20px; width: 352px;">
              <style>
                #pieChart {
                  height: 130px !important;
                  width: 130px !important;
                }
              </style> <canvas id="pieChart" style="margin-top: 85px; margin-left: 45.5444px;"></canvas>
              <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
              <script>
                let waterQuota = 100; // Total water quota
                let waterUsed = 0; // Water already used
                let pieChart; // Variable to store the chart instance
                function updateChart() {
                  const waterRemaining = waterQuota - waterUsed;
                  const ctx = document.getElementById('pieChart').getContext('2d');
                  // If chart already exists, destroy it before creating a new one
                  if (pieChart) {
                    pieChart.destroy();
                  }
                  pieChart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                      datasets: [{
                        data: [waterRemaining, waterUsed],
                        backgroundColor: ['#31356E', '#41B8D5'],
                      }]
                    },
                    options: {
                      animation: false, // Disable animation
                      layout: {
                        padding: 0
                      },
                      plugins: {
                        legend: {
                          display: false
                        },
                        tooltip: {
                          enabled: true,
                          callbacks: {
                            label: function(context) {
                              let label = context.dataset.label || '';
                              if (context.parsed.y !== null) {
                                label += ` ${context.raw}`;
                              }
                              return label;
                            }
                          }
                        }
                      }
                    }
                  });
                  const percentageRemaining = (waterRemaining / waterQuota) * 100;
                  const percentageElement = document.getElementById('percentage');
                  percentageElement.textContent = `${percentageRemaining.toFixed(0)}%`;
                }
                document.addEventListener('DOMContentLoaded', function() {
                  const percentageElement = document.createElement('div');
                  percentageElement.id = 'percentage';
                  percentageElement.style = "position: absolute; width: 100; top: 74%; left: 59.5%; font-size: 45px; text-align: center; color: white;";
                  document.body.appendChild(percentageElement);
                  updateChart();
                });
              </script> <br>
            </td>
            <td style="height: 279.333px; margin-left: 10px; margin-top: 30px; text-align: center;">
    <style>
        .log {
            padding: 12px;
            margin-bottom: 5px;
            display: flex;
            justify-content: space-between;
            width: 310px;
            height: var(--log-height, 5px);
            margin-top: var(--log-margin-top, 1px);
            margin-left: 44px;
            margin-bottom: var(--log-margin-bottom, -5px);
            margin-right: 0;
            color: white;
        }

        .log-date,
        .log-time {
            white-space: nowrap;
        }

        .valve-status {
            text-align: center;
            padding: 28px;
            margin-bottom: 0;
            margin-top: 26px;
            margin-left: -15px;
            font-size: 25px;
            color: white;
        }
    </style>
    <div class="logs"></div>
    <div class="valve-status" id="valveStatus">The Valve is Close</div>
    <script>
        const valveStatus = document.getElementById('valveStatus');
        const logs = document.querySelector('.logs');
        let logsArray = [{ start: '-', end: '-' }, { start: '-', end: '-' }, { start: '-', end: '-' }, { start: '-', end: '-' }, { start: '-', end: '-' }, { start: '-', end: '-' }, { start: '-', end: '-' }];
        let isFlowing = false;

        function updateLogs(flowRate) {
            const date = new Date();
            const dateString = date.toLocaleDateString();
            const timeString = date.toLocaleTimeString();

            if (flowRate > 0) {
                if (!isFlowing) {
                    isFlowing = true;
                    logsArray.push({ start: `${dateString} ${timeString}`, end: '-' });
                    valveStatus.textContent = "The Valve is Open";
                }
            } else {
                if (isFlowing) {
                    isFlowing = false;
                    logsArray[logsArray.length - 1].end = timeString.replace(/ [AP]M/, '');
                    valveStatus.textContent = "The Valve is Close";
                }
            }

            if (logsArray.length > 7) {
                logsArray.shift();
            }

            displayLogs();
            localStorage.setItem('logs', JSON.stringify(logsArray));
        }

        function displayLogs() {
            logs.innerHTML = '';
            for (let log of logsArray) {
                const logDiv = document.createElement('div');
                logDiv.classList.add('log');
                const dateSpan = document.createElement('span');
                dateSpan.textContent = log.start.split(' ')[0];
                dateSpan.classList.add('log-date');
                const timeSpan = document.createElement('span');
                timeSpan.textContent = `${log.start.split(' ')[1] || '-'} - ${log.end || '-'}`;
                timeSpan.classList.add('log-time');
                logDiv.appendChild(dateSpan);
                logDiv.appendChild(timeSpan);
                logs.appendChild(logDiv);
            }
        }

        function resetLogs() {
            logsArray = [{ start: '-', end: '-' }, { start: '-', end: '-' }, { start: '-', end: '-' }, { start: '-', end: '-' }, { start: '-', end: '-' }, { start: '-', end: '-' }, { start: '-', end: '-' }];
            displayLogs();
            localStorage.removeItem('logs');
        }

        const storedLogs = localStorage.getItem('logs');
        if (storedLogs) {
            logsArray = JSON.parse(storedLogs);
        }

        displayLogs();

        // Fetch flow rate periodically and update logs accordingly
        setInterval(() => {
            fetch('/flowRate')
                .then(response => response.json())
                .then(data => {
                    updateLogs(data.flowRate);
                });
        }, 1000);
    </script>
</td>

          </tr>
        </tbody>
      </table>
    </div>
    <div id="settings" class="content ">
      <table style="width: 1526px; height: 712px;" border="0">
        <tbody>
          <tr>
            <td style="height: 513px; width: 271.23px;"> <button onclick="showPage('dashboard')"

                style="position: absolute; padding: 8px; margin-bottom: 401.5px; width: 178px; margin-left: -5px; height: 51.7778px; margin-top: 40.6889px; top: 73px; left: 47px;"></button>&nbsp;
              <br> </td>
            <td style="height: 513px; margin-left: -81px; width: 1244.77px;"> <label

                for="waterQuotaInput" style="position: absolute; color: white; top: 224px; left: 378px;">Water
                Quota:</label> <input id="waterQuotaInput" value="100" max="999999"

                style="position: absolute; top: 223px; left: 475px; width: 251px;"

                type="number"> <br>
              <label for="newUsername" style="position: absolute; color: white; top: 417px; left: 378px;">New
                Username:</label> <input id="newUsername" placeholder="Enter new username"

                style="position: absolute; top: 417px; left: 487px; width: 245px;"

                type="text"> <br>
              <br>
              <label for="newPassword" style="position: absolute; color: white; top: 449px; left: 378px;">New
                Password:</label> <input id="newPassword" placeholder="Enter new password"

                style="position: absolute; top: 448px; left: 487px; width: 245px;"

                type="password"> <br>
              <br>
              <button onclick="updateCredentials()" style="position: absolute; top: 432px; left: 1212px; width: 202px; height: 33px;"></button>
              <br>
              <br>
              <button onclick="resetValues()" style="position: absolute; top: 588px; left: 1196px; width: 194px; margin-left: 29px; height: 31px;">
              </button>
              <form id="waterQuotaForm"> <b> <button type="button" onclick="updateWaterQuota()"

                    style="position: absolute; margin-top: 201px; top: 21px; left: 1203px; font-family: Cambria Math; width: 212px; height: 31px;"></button>
                </b> </form>
              <script>
                
                function resetValues() {
  Swal.fire({
    title: 'Are you sure?',
    text: "This action will reset water quota and total litres values. Are you sure you want to continue?",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, reset it!'
  }).then((result) => {
    if (result.isConfirmed) {
      resetLogs();
      fetch('/resetValues')  // Send request to server to reset values
        .then(response => {
          if (response.ok) {
            Swal.fire(
              'Values Reset!',
              'Water quota and total litres values have been reset.',
              'success'
            );
          } else {
            Swal.fire(
              'Error!',
              'Failed to reset values.',
              'error'
            );
          }
        })
        .catch(error => {
          console.error('Error resetting values:', error);
          Swal.fire(
            'Error!',
            'Failed to reset values.',
            'error'
          );
        });
    }
  });
}
                
                document.addEventListener('DOMContentLoaded', function() {
                  const waterQuotaInput = document.getElementById('waterQuotaInput');
                  waterQuotaInput.addEventListener('input', function() {
                    if (waterQuotaInput.value > 999999) {
                      waterQuotaInput.value = 999999;
                    }
                  });
                });

                function updateWaterQuota() {
  const newQuota = document.getElementById('waterQuotaInput').value;
  
  Swal.fire({
    title: 'Are you sure?',
    text: `Are you sure that you want to change the water quota to ${newQuota} liters?`,
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, change it!'
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/updateWaterQuota?quota=${newQuota}`)
        .then(response => {
          if (response.ok) {
            Swal.fire(
              'Quota Updated!',
              `Water quota has been changed to ${newQuota} liters.`,
              'success'
            );
            waterQuota = parseInt(newQuota, 10);
            updateChart();
          } else {
            Swal.fire(
              'Error!',
              'Failed to update water quota.',
              'error'
            );
          }
        })
        .catch(error => {
          console.error('Error updating water quota:', error);
          Swal.fire(
            'Error!',
            'Failed to update water quota.',
            'error'
          );
        });
    }
  });
}

              </script> </td>
          </tr>
        </tbody>
      </table>
    </div>
    <script>
      function updateCredentials() {
    const newUsername = document.getElementById('newUsername').value;
    const newPassword = document.getElementById('newPassword').value;

    fetch(`/updateCredentials?username=${newUsername}&password=${newPassword}`)
      .then(response => response.text())
      .then(data => {
        console.log('Credentials updated:', data);
        Swal.fire({
          icon: 'success',
          title: 'Credentials Updated',
          text: 'The new username and password have been saved.'
        });
      })
      .catch(error => {
        console.error('Error updating credentials:', error);
        Swal.fire({
          icon: 'error',
          title: 'Update Failed',
          text: 'There was an error updating the credentials.'
        });
      });
  }

  document.getElementById('loginForm').addEventListener('submit', function(event) {
    event.preventDefault();
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;

    fetch(`/getCredentials`)
      .then(response => response.json())
      .then(data => {
        const storedUsername = data.username || 'admin';
        const storedPassword = data.password || 'password';

        if (username === storedUsername && password === storedPassword) {
          // Successful login, redirect to dashboard
          showPage('dashboard');
          document.getElementById('loginError').style.display = 'none';
        } else {
          // Show error message for incorrect credentials
          document.getElementById('loginError').style.display = 'block';
        }
      })
      .catch(error => {
        console.error('Error fetching credentials:', error);
      });
  });

  function showPage(page) {
    document.querySelectorAll('.content').forEach(function(el) {
      el.classList.remove('active');
    });
    document.getElementById(page).classList.add('active');
    if (page === 'dashboard') {
      document.body.style.backgroundImage = 'url("https://github.com/Jaja091202/Water-Dashboard/blob/main/Official%20Dashboard.png?raw=true")';
      document.getElementById('percentage').style.display = "block"; // Show it on the dashboard
    } else if (page === 'settings') {
      document.body.style.backgroundImage = 'url("https://github.com/Jaja091202/Water-Dashboard/blob/main/Official%20Settings.png?raw=true")';
      document.getElementById('percentage').style.display = "none"; // Hide it on settings
    } else if (page === 'login') {
      document.body.style.backgroundImage = 'url("https://github.com/Jaja091202/Water-Dashboard/blob/main/LOGIN.png?raw=true")'; // Reset background for login page
    }
  }
      // Variables
      var liters = 0.00; // Initialize liters with a default value
      var dateRange1 = 'June 01, 2024 - July 01, 2024'; // Change this value to update the first date range
      var dateRange2 = ''; // Change this value to update the second date range
      function updateTotalLitres() {
        fetch("/totalLitres").then(response => response.text()).then(data => {
          const totalLitres = parseFloat(data); // Parse fetched data as a float
          liters = totalLitres; // Update liters with fetched value
          waterUsed = totalLitres; // Update waterUsed with fetched value
          updateDisplayedValues(); // Call function to update displayed values
          updateChart(); // Update the pie chart with new waterUsed value
        }).catch(error => {
          console.error('Error fetching totalLitres:', error);
        });
      }
      function updateDateRange1() {
        const today = new Date();
        const currentYear = today.getFullYear();
        const currentMonth = today.getMonth();
        
        const startDate = new Date(currentYear, currentMonth, 1);
        const endDate = new Date(currentYear, currentMonth + 1, 1);
        
        const startStr = startDate.toLocaleDateString('en-US', { month: 'long', day: '2-digit', year: 'numeric' });
        const endStr = endDate.toLocaleDateString('en-US', { month: 'long', day: '2-digit', year: 'numeric' });
        
        document.getElementById('dateRange1').textContent = `${startStr} - ${endStr}`;
      }
      // Function to update displayed values
      function updateDisplayedValues() {
        // Calculations based on updated liters value
        var calculatedAmount = (liters * 0.02591).toFixed(2);
        // Updating the HTML with variables
        document.getElementById('liters').innerText = liters.toFixed(2);
        document.getElementById('calculatedAmount').innerText = calculatedAmount;
      }
      // Fetch totalLitres initially and then at intervals
      updateTotalLitres(); // Fetch initially
      setInterval(updateTotalLitres, 1000); // Fetch every 1 second
      document.getElementById('dateRange1').innerText = dateRange1;
      document.getElementById('dateRange2').innerText = dateRange2;

      document.addEventListener('DOMContentLoaded', (event) => {
        updateDateRange1();
      });
    </script>
    
  </body>
</html>



)rawliteral"; 

void IRAM_ATTR pulseCounter() {
    pulseCount++;
}

// Function to write float value to EEPROM
void EEPROMWriteFloat(int address, float value) {
  byte* p = (byte*)(void*)&value;
  for (int i = 0; i < sizeof(value); i++)
    EEPROM.write(address + i, *p++);
}

// Function to read float value from EEPROM
float EEPROMReadFloat(int address) {
  float value = 0.0;
  byte* p = (byte*)(void*)&value;
  for (int i = 0; i < sizeof(value); i++)
    *p++ = EEPROM.read(address + i);
  return value;
}

// Function to write int value to EEPROM
void EEPROMWriteInt(int address, int value) {
  EEPROM.write(address, value >> 8);
  EEPROM.write(address + 1, value & 0xFF);
}

// Function to read int value from EEPROM
int EEPROMReadInt(int address) {
  return (EEPROM.read(address) << 8) + EEPROM.read(address + 1);
}

void readCredentials() {
  for (int i = 0; i < 20; ++i) {
    storedUsername[i] = EEPROM.read(USERNAME_ADDR + i);
    storedPassword[i] = EEPROM.read(PASSWORD_ADDR + i);
  }
  Serial.print("Load Credencial");
}

void saveCredentials(const char* username, const char* password) {
  for (int i = 0; i < 20; ++i) {
    EEPROM.write(USERNAME_ADDR + i, username[i]);
    EEPROM.write(PASSWORD_ADDR + i, password[i]);
  }
  EEPROM.commit();
  Serial.print("Saved Credencial");
}

void handleGetCredentials(AsyncWebServerRequest *request) {
  String username(storedUsername);
  String password(storedPassword);

  String response = "{\"username\":\"" + username + "\",\"password\":\"" + password + "\"}";
  request->send(200, "application/json", response);
}

void handleUpdateCredentials(AsyncWebServerRequest *request) {
  if (request->hasParam("username") && request->hasParam("password")) {
    String newUsername = request->getParam("username")->value();
    String newPassword = request->getParam("password")->value();
    newUsername.toCharArray(storedUsername, 20);
    newPassword.toCharArray(storedPassword, 20);
    saveCredentials(storedUsername, storedPassword);
    request->send(200, "text/plain", "Credentials updated");
  } else {
    request->send(400, "text/plain", "Invalid Request");
  }
}

void setup() {
    Serial.begin(115200);
    EEPROM.begin(EEPROM_SIZE);

    lcd.init();
    lcd.backlight();
    delay(3000);
    lcd.setCursor(6, 1);
    lcd.print("BiniTank");
    lcd.setCursor(1, 4);
    lcd.print("FINAL PROJECT");
    delay(5000);

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("MEMBERS:");
    lcd.setCursor(1, 1);
    lcd.print("Aguila, VIJ");
    lcd.setCursor(1, 2);
    lcd.print("Flores, SALM");
    lcd.setCursor(1, 3);
    lcd.print("Gacusan, JKG");
    delay(5000);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("MEMBERS:");
    lcd.setCursor(1, 1);
    lcd.print("Javierto, CAR");
    lcd.setCursor(1, 2);
    lcd.print("Macatangay, EJR");
    lcd.setCursor(1, 3);
    lcd.print("Solis, LV");

    delay(5000);
    lcd.clear();
    lcd.setCursor(0, 1);
    lcd.print("Connecting to WiFi");

    pinMode(LED_BUILTIN, OUTPUT);
    pinMode(SENSOR, INPUT_PULLUP);
    pinMode(valvePin, OUTPUT);
    digitalWrite(valvePin, LOW); // Ensure valve starts in OFF state

    pulseCount = 0;
    flowRate = 0.0;
    flowMilliLitres = 0;
    totalMilliLitres = 0;
    totalLitres = 0;
    previousMillis = 0;

    attachInterrupt(digitalPinToInterrupt(SENSOR), pulseCounter, FALLING);

    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");
    
    lcd.clear();

    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
        request->send_P(200, "text/html", index_html);
    });

    server.on("/totalLitres", HTTP_GET, [](AsyncWebServerRequest *request){
        request->send_P(200, "text/plain", String(totalLitres).c_str());
    });

    server.on("/flowRate", HTTP_GET, [](AsyncWebServerRequest *request){
    String json = "{\"flowRate\":" + String(flowRate) + "}";
    request->send(200, "application/json", json);
    });

    server.on("/updateWaterQuota", HTTP_GET, [] (AsyncWebServerRequest *request) {
        String quota = request->arg("quota");
        waterQuota = quota.toInt();
        
        request->send(200, "text/plain", "Water quota updated");
        lcd.clear();
    });

    server.on("/updateCredentials", HTTP_GET, [](AsyncWebServerRequest *request){
    if (request->hasParam("username") && request->hasParam("password")) {
      String newUsername = request->getParam("username")->value();
      String newPassword = request->getParam("password")->value();
      saveCredentials(newUsername.c_str(), newPassword.c_str());
      request->send(200, "text/plain", "Credentials updated successfully");
    } else {
      request->send(400, "text/plain", "Missing username or password");
    }
  });
    readCredentials();
    server.on("/getCredentials", HTTP_GET, handleGetCredentials);
    server.on("/updateCredentials", HTTP_GET, handleUpdateCredentials);


    server.on("/controlValve", HTTP_GET, [] (AsyncWebServerRequest *request) {
        String action = request->arg("action");
        if (action == "on") {
            digitalWrite(valvePin, HIGH); // Turn valve ON
            request->send(200, "text/plain", "Valve turned ON");
        } else if (action == "off") {
            digitalWrite(valvePin, LOW); // Turn valve OFF
            request->send(200, "text/plain", "Valve turned OFF");
        } else {
            request->send(400, "text/plain", "Invalid action");
        }
    });

    server.on("/resetValues", HTTP_GET, [](AsyncWebServerRequest *request) {
    EEPROMWriteInt(WATER_QUOTA_ADDR, 0);  // Clear water quota in EEPROM
    EEPROMWriteFloat(TOTAL_LITRES_ADDR, 0.0);  // Clear total litres in EEPROM
    totalLitres = 0.0;  // Update in-memory variable
    waterQuota = 0;  // Update in-memory variable
    EEPROM.commit();
    lcd.clear();
    request->send(200, "text/plain", "Values reset successful");
    });


    server.begin();
    Serial.println("HTTP server started");
    Serial.println(WiFi.localIP());

    
    lcd.setCursor(0, 1);
    lcd.print("Connected to Wifi");
    lcd.setCursor(0, 2);
    lcd.print("IP: ");
    lcd.setCursor(4, 2);
    lcd.print(WiFi.localIP());
    delay(5000);
    lcd.clear();

    


    //Read stored values from EEPROM
    totalLitres = EEPROMReadFloat(TOTAL_LITRES_ADDR);
    waterQuota = EEPROMReadInt(WATER_QUOTA_ADDR);
    
}


void loop() {
    currentMillis = millis();
    if (currentMillis - previousMillis > interval) {
        pulse1Sec = pulseCount;
        pulseCount = 0;

        flowRate = ((1000.0 / (millis() - previousMillis)) * pulse1Sec) / calibrationFactor;
        previousMillis = millis();

        flowMilliLitres = (flowRate / 60) * 1000;
        flowLitres = (flowRate / 60);

        totalMilliLitres += flowMilliLitres;
        totalLitres += flowLitres;

        

        Serial.print("Flow rate: ");
        Serial.print(flowRate);
        Serial.print(" L/min");
        Serial.print("\t");

        Serial.print("Output Liquid Quantity: ");
        Serial.print(totalMilliLitres);
        Serial.print(" mL / ");
        Serial.print(totalLitres);
        Serial.println(" L");

        
        lcd.setCursor(0,0);
        lcd.print("Flow rate:");
        lcd.setCursor(11,0);
        lcd.print(flowRate);
        lcd.setCursor(15,0);
        lcd.print("L/min");
        lcd.setCursor(0,1);
        lcd.print("Volume:");
        lcd.setCursor(8, 1);
        lcd.print(String(totalLitres) + "L");
        lcd.setCursor(0, 2);
        lcd.print("Cost:");
        lcd.setCursor(6, 2);
        lcd.print("Php " + String(totalLitres*0.06));
        lcd.setCursor(0, 3);
        lcd.print("Liters left:");
        lcd.setCursor(13, 3);
        lcd.print(String((waterQuota - totalLitres)));

        EEPROMWriteFloat(TOTAL_LITRES_ADDR, totalLitres);
        EEPROMWriteInt(WATER_QUOTA_ADDR, waterQuota);

        // Commit changes to EEPROM
        EEPROM.commit();

        if (strcmp(storedUsername, "admin") == 0 && strcmp(storedPassword, "password") == 0) {
    // Proceed with normal operations
        } else {
          // Handle invalid login scenario
        }

    }
}

